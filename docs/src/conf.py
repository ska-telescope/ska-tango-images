#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# skeleton documentation build configuration file, created by
# sphinx-quickstart on Thu May 17 15:17:35 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import subprocess
from pathlib import Path

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'recommonmark',
    'sphinx_substitution_extensions'
    ]

# Add any paths that contain templates here, relative to this directory.
templates_path = []

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'SKA Tango Images'
copyright = 'SKAO'

REPO_DIR = os.path.abspath(f"{os.path.dirname(__file__)}/../../")


def get_version(dir=None):
    is_ci_job = "CI_JOB_ID" in os.environ
    is_rtd_job = "READTHEDOCS" in os.environ
    is_tag_job = "CI_COMMIT_TAG" in os.environ
    is_local_job = not is_ci_job and not is_rtd_job

    # Return "local" for images when a local job
    if is_local_job and dir is not None:
        return "local"

    # When running on the CI, use the commit tag for images
    if is_ci_job and not is_tag_job and dir is not None:
        return os.environ["CI_COMMIT_SHORT_SHA"]

    if dir is None:
        dir = Path(REPO_DIR)

    with open(dir / '.release') as f:
        for line in f:
            if line.startswith('release'):
                return line.strip().removeprefix('release=')

def get_release():
    result = subprocess.run(['git', 'describe', '--tags', '--always', 'HEAD'], check=True, capture_output=True)

    return result.stdout.decode()

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = get_version()
# The full version, including alpha/beta/rc tags.
release = get_release()

def generate_prolog():
    if "CI_COMMIT_TAG" in os.environ or "READTHEDOCS" in os.environ:
        prolog = '.. |oci-registry| replace:: artefact.skao.int\n'
    else:
        prolog = '.. |oci-registry| replace:: registry.gitlab.com/ska-telescope/ska-tango-images\n'

    for dockerfile in Path(f'{REPO_DIR}/images').rglob('Dockerfile'):
        dir = dockerfile.parent
        name = str(dir).removeprefix(f'{REPO_DIR}/images/ska-tango-images-')

        version = get_version(dir)

        prolog += f'.. |{name}-imgver| replace:: {version}\n'

    with open(f'{REPO_DIR}/scripts/upstream_versions') as f:
        for line in f.readlines():
            if line.startswith("#"):
                continue
            name, version = line.strip().split('=')
            name = name.lower().replace('_', '-')

            prolog += f'.. |{name}| replace:: {version}\n'

    return prolog

rst_prolog = generate_prolog()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'En-en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "ska_ser_sphinx_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
html_context = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# html_sidebars = {
#     '**': [
#         'about.html',
#         'navigation.html',
#         'relations.html',  # needs 'show_related': True theme option to display
#         'searchbox.html',
#         'donate.html',
#     ]
# }


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
# htmlhelp_basename = 'skeletondoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, '{{project-name}}.tex', '{{project-name}} Documentation',
     '{{author}}', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, '{{project-name}}', '{{project-name}} Documentation',
     ['{{author}}'], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, '{{project-name}}', '{{project-name}} Documentation',
     '{{author}}', '{{project-name}}', 'One line description of project.',
     'Miscellaneous'),
]




# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}
