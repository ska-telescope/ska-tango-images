{{- /*
tango-util.multidevicesds.tpl 
Parameters:
- deviceserver (the deviceserver entire yaml tag)
- image (to be used for the deviceserver)
- local (the local chart)
- instance (of the device server)
*/}}
{{ define "tango-util.multidevicesds.tpl" }}
---
{{ $labels := coalesce .local.Values.global.labels .local.Values.labels "label:none" }}
{{ $annotations := coalesce .local.Values.global.annotations .local.Values.annotations "annotations:none" }}
{{ $default_tango_host := printf "%s-%s" "databaseds-tango-base-" .local.Release.Name }}
{{ $tango_host := tpl (coalesce .local.Values.global.tango_host .local.Values.tango_host $default_tango_host | toString) .local }}
{{ $dsconfig := coalesce .local.Values.global.dsconfig .local.Values.dsconfig}}
{{ $chart := .local }}
{{ $deviceserver := .deviceserver }}
{{ $deviceserver_name := tpl (coalesce .name .deviceserver.name | toString) .local }}

---
# Device Server configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $deviceserver_name | toString }}-dsconfig-json
  namespace: {{ .local.Release.Namespace }}
  labels:
{{ toYaml $labels | indent 4 }}
    component: configurator
    function: deployment
    intent: enabling
    domain: self-configuration
  annotations:
{{ toYaml $annotations | indent 4 }}
data:
  configuration.json: | 
    {
      "servers": {
        "{{ $deviceserver.server.name }}" : {
          {{- range $index_instance,$instance := $deviceserver.server.instances }}
          {{- if $index_instance}},{{end}}
          "{{ $instance.name }}": {
            {{- range $index_class, $class := $instance.classes }}
            {{- if $index_class}},{{end}}
            "{{ $class.name }}": {
              {{- range $index_device, $device := $class.devices }}
              {{- if $index_device}},{{end}}
              "{{ $device.name }}": {
                {{- if $device.properties }}
                "properties": {
                  {{- range $index_property, $property := $device.properties }}
                  {{- if $index_property}},{{end}}
                  "{{ $property.name }}": {{ $property.values | toJson }}
                  {{- end }}
                }{{ if $device.attribute_properties }},{{ end }}
                {{- end }}
                {{- if $device.attribute_properties }}
                "attribute_properties": {
                {{- range $index_attr_prop, $attr_prop := $device.attribute_properties }}
                  {{- if $index_attr_prop}},{{end}}
                  "{{ $attr_prop.attribute }}": {
                    {{- range $index_prop, $prop := $attr_prop.properties }}
                    {{- if $index_prop}},{{end}}
                    "{{ $prop.name }}": {{ $prop.values | toJson }}
                    {{- end }}
                  }
                {{- end }}
                }
                {{- end }}
              }
              {{- end }}    
            }
            {{- end }}
          }
          {{- end }} 
        }
      }
    }
  bootstrap.sh: |
    #/bin/sh
    json2tango -w -a -u data/configuration.json
    rc=$?
    if [ $rc -eq 0 ]; then
      echo "finished normally."
      exit 0
    else
      if [ $rc -eq 2 ]; then
        echo "finished with an update."
        exit 0
      else
        echo "finished with an ERROR."
        exit $rc
      fi
    fi
  {{ $deviceserver.server.name }}.py: |
    import importlib.util
    from tango.server import run
    
    classes = []
    {{- range $module := $deviceserver.modules }}
    spec = importlib.util.spec_from_file_location("{{ $module.name }}", "{{ $module.path }}")
    mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(mod)
    {{- range $instance := $deviceserver.server.instances }}
    {{- range $class := $instance.classes }}
    try:
      myclass = getattr(mod, "{{ $class.name }}")
      if not myclass in classes: 
        classes.append(myclass)
    except:
      pass
    
    {{- end }}
    {{- end }}
    {{- end }}

    def main(args=None, **kwargs):
      return run(classes=(classes), args=args, **kwargs)

    if __name__ == '__main__':
        main()

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{$deviceserver_name | toString }}-sa-{{ .local.Release.Name }}
  namespace: {{ .local.Release.Namespace }}

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{$deviceserver_name | toString }}-role-bind-{{ .local.Release.Name }}
  namespace: {{ .local.Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{$deviceserver_name | toString }}-sa-{{ .local.Release.Name }}
  namespace: {{ .local.Release.Namespace }}
roleRef:
  kind: Role
  name: {{$deviceserver_name | toString }}-role-{{ .local.Release.Name }}
  apiGroup: rbac.authorization.k8s.io

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{$deviceserver_name | toString }}-role-{{ .local.Release.Name }}
  namespace: {{ .local.Release.Namespace }}
rules:
- apiGroups: ["", "batch", "apps"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]

---
# run once Job for loading Device Server config
apiVersion: batch/v1
kind: Job
metadata:
  name: {{$deviceserver_name | toString }}-configuration-{{ .local.Release.Name }}
  namespace: {{ .local.Release.Namespace }}
  labels:
{{ toYaml $labels | indent 4 }}
    component: configurator
    function: deployment
    intent: enabling
    domain: self-configuration
  annotations:
{{ toYaml $annotations | indent 4 }}
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      initContainers:
      - name: check-databaseds-ready
        image: {{ $dsconfig.image.registry }}/{{ $dsconfig.image.image }}:{{ $dsconfig.image.tag }}
        imagePullPolicy: {{ $dsconfig.image.pullPolicy }}
        command:
          - retry
          - --max=10
          - --
          - /usr/local/bin/wait-for-it.sh
          - {{ $tango_host }}
          - --timeout=60
          - --strict
          - --
          - echo {{ $tango_host }} ready
{{- if (.local.Values.global.environment_variables) }}
        env:
{{- range $index, $envvar := .local.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $ }}
{{- end }}
{{- end }}
      containers:
      - name: dsconfig
        image: "{{ $dsconfig.image.registry }}/{{ $dsconfig.image.image }}:{{ $dsconfig.image.tag }}"
        imagePullPolicy: {{ $dsconfig.image.pullPolicy }}
        command: # exit code 2 is CONFIG_APPLIED - https://github.com/MaxIV-KitsControls/lib-maxiv-dsconfig/blob/master/dsconfig/utils.py#L11 !!!! this should not be an error !!!!
          - sh
          - data/bootstrap.sh
        env:
        - name: TANGO_HOST
          value: {{ $tango_host }}
{{- if (.local.Values.global.environment_variables) }}
{{- range $index, $envvar := .local.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $ }}
{{- end }}
{{- end }}
        volumeMounts:
          - name: configuration
            mountPath: data
            readOnly: true
      volumes:
        - name: configuration
          configMap:
            name: {{$deviceserver_name | toString }}-dsconfig-json
      restartPolicy: Never

---
{{ range $instance := $deviceserver.server.instances }}
{{ $safe_instance := $instance.name | toString | replace "_" "-" }}

{{ if has $safe_instance $deviceserver.instances }}
---
# one k8s service per instance
apiVersion: v1
kind: Service
metadata:
  name: {{$deviceserver_name | toString }}-{{ $safe_instance }}
  namespace: {{ $chart.Release.Namespace }}
  labels:
{{ toYaml $labels | indent 4 }}
    component: {{tpl ($deviceserver_name | toString) $chart }}-{{ $safe_instance }}
    function: {{ $deviceserver.function }}
    domain: {{ $deviceserver.domain }}
    subsystem: {{ $chart.Values.subsystem }}
  annotations:
{{ toYaml $annotations | indent 4 }}
spec:
  selector:
    subsystem: {{ $chart.Values.subsystem }}
    component: {{tpl ($deviceserver_name | toString) $chart }}-{{ $safe_instance }}
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{$deviceserver_name | toString }}-{{ $safe_instance }}
  namespace: {{ $chart.Release.Namespace }}
  labels:
{{ toYaml $labels | indent 4 }}
    component: {{$deviceserver_name | toString }}-{{ $safe_instance }}
    function: {{ $deviceserver.function }}
    domain: {{ $deviceserver.domain }}
    subsystem: {{ $chart.Values.subsystem }}
  annotations:
{{ toYaml $annotations | indent 4 }}
spec:
  selector:
    matchLabels:
      component: {{$deviceserver_name | toString }}-{{ $safe_instance }}
      subsystem: {{ $chart.Values.subsystem }}
  serviceName: {{$deviceserver_name | toString }}-{{ $safe_instance }}
  replicas: 1
  template:
    metadata:
      labels:
        component: {{$deviceserver_name | toString }}-{{ $safe_instance }}
        function: {{ $deviceserver.function }}
        domain: {{ $deviceserver.domain }}
        subsystem: {{ $chart.Values.subsystem }}
{{ toYaml $labels | indent 8 }}
      annotations:
{{ toYaml $annotations | indent 8 }}
    spec:
      volumes:
        - name: configuration
          configMap:
            name: {{$deviceserver_name | toString }}-dsconfig-json
      serviceAccountName: {{ $deviceserver_name | toString }}-sa-{{ $chart.Release.Name }}
      initContainers:
      {{ if $chart.Values.dsconfig.configuration_file }}
      - name: wait-for-configuration
        image: "bitnami/kubectl:latest"
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
        args:
          - kubectl wait job --for=condition=complete {{ $deviceserver_name | toString }}-configuration-{{ $chart.Release.Name }} {{ if $chart.Values.dsconfig.timeout }} --timeout={{ $chart.Values.dsconfig.timeout }} {{ end }}
      {{ end }}
{{ if ($deviceserver.depends_on) }}
{{ range $index, $device := $deviceserver.depends_on }}
{{ if ($device.host) }}
      - name: check-dependencies-{{ $index }}
        image: "{{ $dsconfig.image.registry }}/{{ $dsconfig.image.image }}:{{ $dsconfig.image.tag }}"
        imagePullPolicy: {{ $dsconfig.image.pullPolicy }}
        command:
          - retry
          - --max=10
          - --
          - /usr/local/bin/wait-for-it.sh
          - {{ $device.host }}
          - --timeout=60
          - --strict
          - --
          - echo {{ $device.host }} ready
{{- if ($chart.Values.global.environment_variables) }}
        env:
{{- range $index, $envvar := $chart.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{- end }}
{{ if ($device.device) }}
      - name: check-dependencies-{{ $index }}
        image: "{{ $dsconfig.image.registry }}/{{ $dsconfig.image.image }}:{{ $dsconfig.image.tag }}"
        imagePullPolicy: {{ $dsconfig.image.pullPolicy }}
        command:
          - retry
          - --max=10
          - --
          - tango_admin
          - --ping-device
          - {{ $device.device | toString }}
        env:
        - name: TANGO_HOST
          value: {{ $tango_host }}
{{- if ($chart.Values.global.environment_variables) }}
{{- range $index, $envvar := $chart.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{- end }}
{{- end }} 
{{- end }} 
      containers:
      - name: device-server
        image: "{{ tpl ($deviceserver.image.registry | toString) $chart }}/{{ tpl ($deviceserver.image.image | toString) $chart }}:{{ tpl ($deviceserver.image.tag | toString) $chart }}"
        imagePullPolicy: {{ tpl ($deviceserver.image.pullPolicy | toString) $chart }}
        command:
          - sh
          - -c
        args:
          - {{ if not $deviceserver.noretry }}retry --max=10 -- {{ end }}{{ if $deviceserver.command }}{{ $deviceserver.command }}{{ else }}/usr/bin/python /data/{{ $deviceserver.server.name }}.py{{ end }} {{ $safe_instance |toString }}
        volumeMounts:
          - name: configuration
            mountPath: data
            readOnly: true
        env:
        - name: TANGO_HOST
          value: {{ $tango_host }}
{{- if $chart.Values.global.environment_variables }}
{{- range $index, $envvar := $chart.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{- if $deviceserver.environment_variables }}
{{- range $index, $envvar := $deviceserver.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{ if not $chart.Values.do_not_constraint_resources }}
        resources:
{{ toYaml (coalesce $deviceserver.resources $chart.Values.resources) | indent 10 }}
{{ end }}
{{- with $deviceserver.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $chart.Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $chart.Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
---
{{ end }} ## if has

{{ end }} # range instances

{{ end }} # multidevicesds.tpl

