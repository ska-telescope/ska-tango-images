{{- /*
tango-util.multidevicesds.tpl 
Parameters:
- deviceserver (the deviceserver entire yaml tag)
- image (to be used for the deviceserver)
- local (the local chart)
- instance (of the device server)
*/}}
{{ define "ska-tango-util.multidevice-svc.tpl" }}
---
{{ $labels := coalesce .local.Values.global.labels .local.Values.labels "label:none" }}
{{ $annotations := coalesce .local.Values.global.annotations .local.Values.annotations "annotations:none" }}
{{ $default_tango_host := printf "%s-%s:10000" "databaseds-tango-base-" .local.Release.Name }}
{{ $tango_host := tpl (coalesce .local.Values.global.tango_host .local.Values.tango_host $default_tango_host | toString) .local }}
{{ $dsconfig := coalesce .local.Values.global.dsconfig .local.Values.dsconfig}}
{{ $chart := .local }}
{{ $deviceserver := .deviceserver }}
{{ $deviceserver_name := tpl (coalesce .name .deviceserver.name | toString) .local }}
{{ $kubectl_wait_timeout := coalesce $dsconfig.timeout "120s" }}

{{ $lprobe_initial_delay_seconds := 0 }}
{{ $lprobe_period_seconds := 5 }}
{{ $lprobe_timeout_seconds := 1 }}
{{ $lprobe_success_threshold := 1 }}
{{ $lprobe_failure_threshold := 3 }}
{{ if $deviceserver.livenessProbe }}
{{ $lprobe_initial_delay_seconds = coalesce $deviceserver.livenessProbe.initialDelaySeconds $lprobe_initial_delay_seconds }}
{{ $lprobe_period_seconds = coalesce $deviceserver.livenessProbe.periodSeconds $lprobe_period_seconds }}
{{ $lprobe_timeout_seconds = coalesce $deviceserver.livenessProbe.timeoutSeconds $lprobe_timeout_seconds }}
{{ $lprobe_success_threshold = coalesce $deviceserver.livenessProbe.successThreshold $lprobe_success_threshold }}
{{ $lprobe_failure_threshold = coalesce $deviceserver.livenessProbe.failureThreshold $lprobe_failure_threshold }}
{{ end }}

{{ $rprobe_initial_delay_seconds := 0 }}
{{ $rprobe_period_seconds := 5 }}
{{ $rprobe_timeout_seconds := 1 }}
{{ $rprobe_success_threshold := 1 }}
{{ $rprobe_failure_threshold := 3 }}
{{ if $deviceserver.readinessProbe }}
{{ $rprobe_initial_delay_seconds = coalesce $deviceserver.readinessProbe.initialDelaySeconds $rprobe_initial_delay_seconds }}
{{ $rprobe_period_seconds = coalesce $deviceserver.readinessProbe.periodSeconds $rprobe_period_seconds }}
{{ $rprobe_timeout_seconds = coalesce $deviceserver.readinessProbe.timeoutSeconds $rprobe_timeout_seconds }}
{{ $rprobe_success_threshold = coalesce $deviceserver.readinessProbe.successThreshold $rprobe_success_threshold }}
{{ $rprobe_failure_threshold = coalesce $deviceserver.readinessProbe.failureThreshold $rprobe_failure_threshold }}
{{ end }}
---
{{ range $instance := $deviceserver.server.instances }}
{{ $safe_instance := $instance.name | toString | replace "_" "-" }}

{{ if has $safe_instance $deviceserver.instances }}
---
# one k8s service per instance
apiVersion: v1
kind: Service
metadata:
  name: {{$deviceserver_name | toString }}-{{ $safe_instance }}
  namespace: {{ $chart.Release.Namespace }}
  labels:
{{ toYaml $labels | indent 4 }}
    component: {{tpl ($deviceserver_name | toString) $chart }}-{{ $safe_instance }}
    function: {{ $deviceserver.function }}
    domain: {{ $deviceserver.domain }}
    subsystem: {{ $chart.Values.subsystem }}
  annotations:
{{ toYaml $annotations | indent 4 }}
spec:
  selector:
    subsystem: {{ $chart.Values.subsystem }}
    component: {{tpl ($deviceserver_name | toString) $chart }}-{{ $safe_instance }}
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{$deviceserver_name | toString }}-{{ $safe_instance }}
  namespace: {{ $chart.Release.Namespace }}
  labels:
{{ toYaml $labels | indent 4 }}
    component: {{$deviceserver_name | toString }}-{{ $safe_instance }}
    function: {{ $deviceserver.function }}
    domain: {{ $deviceserver.domain }}
    subsystem: {{ $chart.Values.subsystem }}
  annotations:
{{ toYaml $annotations | indent 4 }}
spec:
  selector:
    matchLabels:
      component: {{$deviceserver_name | toString }}-{{ $safe_instance }}
      subsystem: {{ $chart.Values.subsystem }}
  serviceName: {{$deviceserver_name | toString }}-{{ $safe_instance }}
  replicas: 1
  template:
    metadata:
      labels:
        component: {{$deviceserver_name | toString }}-{{ $safe_instance }}
        function: {{ $deviceserver.function }}
        domain: {{ $deviceserver.domain }}
        subsystem: {{ $chart.Values.subsystem }}
{{ toYaml $labels | indent 8 }}
      annotations:
{{ toYaml $annotations | indent 8 }}
    spec:
      volumes:
        - name: configuration
          configMap:
            name: {{$deviceserver_name | toString }}-dsconfig-json
      serviceAccountName: {{ $deviceserver_name | toString }}-sa-{{ $chart.Release.Name }}
      initContainers:
      - name: wait-for-configuration
        image: "bitnami/kubectl:latest"
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
        args:
          - kubectl wait job --for=condition=complete {{ $deviceserver_name | toString }}-config --timeout={{ $kubectl_wait_timeout }}
{{ if ($deviceserver.depends_on) }}
{{ range $index, $device := $deviceserver.depends_on }}
{{ if ($device.host) }}
      - name: check-dependencies-{{ $index }}
        image: "{{ $dsconfig.image.registry }}/{{ $dsconfig.image.image }}:{{ $dsconfig.image.tag }}"
        imagePullPolicy: {{ $dsconfig.image.pullPolicy }}
        command:
          - retry
          {{- if $chart.Values.global.retry }}
          {{- range $retry_option := $chart.Values.global.retry }}
          - {{ $retry_option }}
          {{- end }}
          {{- else }}
          - --max=60
          {{- end }}
          - --
          - /usr/local/bin/wait-for-it.sh
          - {{ $device.host }}
          - --timeout=60
          - --strict
          - --
          - echo {{ $device.host }} ready
{{- if ($chart.Values.global.environment_variables) }}
        env:
{{- range $index, $envvar := $chart.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{- end }}
{{ if ($device.device) }}
      - name: check-dependencies-{{ $index }}
        image: "{{ $dsconfig.image.registry }}/{{ $dsconfig.image.image }}:{{ $dsconfig.image.tag }}"
        imagePullPolicy: {{ $dsconfig.image.pullPolicy }}
        command:
          - retry
          {{- if $chart.Values.global.retry }}
          {{- range $retry_option := $chart.Values.global.retry }}
          - {{ $retry_option }}
          {{- end }}
          {{- else }}
          - --max=60
          {{- end }}
          - --
          - tango_admin
          - --ping-device
          - {{ $device.device | toString }}
        env:
        - name: TANGO_HOST
          value: {{ $tango_host }}
{{- if ($chart.Values.global.environment_variables) }}
{{- range $index, $envvar := $chart.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{- end }}
{{- end }} 
{{- end }} 
      containers:
      - name: device-server
        image: "{{ tpl ($deviceserver.image.registry | toString) $chart }}/{{ tpl ($deviceserver.image.image | toString) $chart }}:{{ tpl ($deviceserver.image.tag | toString) $chart }}"
        imagePullPolicy: {{ tpl ($deviceserver.image.pullPolicy | toString) $chart }}
        command:
          {{- if not $deviceserver.noretry }}
          - retry 
          {{- if $chart.Values.global.retry }}
          {{- range $retry_option := $chart.Values.global.retry }}
          - {{ $retry_option }}
          {{- end }}
          {{- else }}
          - --max=60
          {{- end }}
          - -- 
          {{- end }}
          {{- if $deviceserver.command }}
          - {{ $deviceserver.command }}
          {{ else if $deviceserver.entrypoints }}
          {{- range $index_ep, $entrypoint := $deviceserver.entrypoints }}
          - /usr/bin/python {{ $entrypoint.path }}
          {{- end }}
          {{- else }}
          - /usr/bin/python 
          - /data/{{ $deviceserver.server.name }}.py
          {{- end }} 
          - "{{ $safe_instance | toString }}"
        volumeMounts:
          - name: configuration
            mountPath: data
            readOnly: true
        livenessProbe:
          exec:
            command:
            - "sh"
            - "-c"
          {{- range $index_class, $class := $instance.classes }}
          {{ $num_of_classes := len $instance.classes }}
          {{ $num_of_classes = sub $num_of_classes 1 }}
          {{ $num_of_devices := len $class.devices }}
          {{ $num_of_devices = sub $num_of_devices 1 }}
          {{- range $index_device, $device := $class.devices }}
            - tango_admin
            - --ping-device
          {{ if or (lt $index_class $num_of_classes) (lt $index_device  $num_of_devices)  }}
            - {{ $device.name }}
            - "&&"
          {{ else }}
            - {{ $device.name }}
          {{ end }}
          {{ end }}
          {{ end }}
          initialDelaySeconds: {{ default 0 $lprobe_initial_delay_seconds }}
          periodSeconds: {{ $lprobe_period_seconds }}
          timeoutSeconds: {{ $lprobe_timeout_seconds }}
          successThreshold: {{ $lprobe_success_threshold }}
          failureThreshold: {{ $lprobe_failure_threshold }}
        readinessProbe:
          exec:
            command:
            - "sh"
            - "-c"
          {{- range $index_class, $class := $instance.classes }}
          {{ $num_of_classes := len $instance.classes }}
          {{ $num_of_classes = sub $num_of_classes 1 }}
          {{ $num_of_devices := len $class.devices }}
          {{ $num_of_devices = sub $num_of_devices 1 }}
          {{- range $index_device, $device := $class.devices }}
            - tango_admin
            - --ping-device
          {{ if or (lt $index_class $num_of_classes) (lt $index_device  $num_of_devices)  }}
            - {{ $device.name }}
            - "&&"
          {{ else }}
            - {{ $device.name }}
          {{ end }}
          {{ end }}
          {{ end }}
          initialDelaySeconds: {{ default 0 $rprobe_initial_delay_seconds }}
          periodSeconds: {{ $rprobe_period_seconds }}
          timeoutSeconds: {{ $rprobe_timeout_seconds }}
          successThreshold: {{ $rprobe_success_threshold }}
          failureThreshold: {{ $rprobe_failure_threshold }}
        env:
        - name: TANGO_HOST
          value: {{ $tango_host }}
{{- if $chart.Values.global.environment_variables }}
{{- range $index, $envvar := $chart.Values.global.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{- if $deviceserver.environment_variables }}
{{- range $index, $envvar := $deviceserver.environment_variables }}
        - name: {{$envvar.name}}
          value: {{tpl ($envvar.value | toString) $chart }}
{{- end }}
{{- end }}
{{ if not $chart.Values.do_not_constraint_resources }}
        resources:
{{ toYaml (coalesce $deviceserver.resources $chart.Values.resources) | indent 10 }}
{{ end }}
{{- with $deviceserver.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $chart.Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $chart.Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
---
{{ end }} ## if has

{{ end }} # range instances

{{ end }} # multidevice-svc.tpl

