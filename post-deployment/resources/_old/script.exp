#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Nov 15 09:12:55 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set timeout 2
spawn /venv/bin/itango3 --no-color-info --simple-prompt --no-banner
match_max 100000

expect {
    timeout { send_user "Problem starting itango session"; exit 1 }
    -ex "In \[1\]: " { }
}

send "dev = Device('sys/tg_test/1')\r"
expect {
    timeout { send_user "\nCould not create device proxy to TangoTest device\n"; exit 1 }
    -ex "dev = Device('sys/tg_test/1')\r\n\r\nIn \[2\]: " {}
}

send "dev.status()\r"
expect {
    timeout { send_user "\nTangoTest device is in unexpected state\n"; exit 1 }
    -ex "dev.status()\r\nOut\[2\]: 'The device is in RUNNING state.'\r\n\r\nIn \[3\]: " {}
}

send "dev.DevString('hello world!')\r"
expect {
    timeout { send_user "\nFailure executing command\n"; exit 1 }
    -ex "dev.DevString('hello world!')\r\nOut\[3\]: 'hello world!'\r\n\r\nIn \[4\]: " {}
}

send "import numpy; isinstance(dev.read_attribute('short_spectrum_ro').value, numpy.ndarray)\r"
expect {
    timeout { send_user "\nFailure executing command\n"; exit 1 }
    -ex "import numpy; isinstance(dev.read_attribute('short_spectrum_ro').value, numpy.ndarray)\r\nOut\[4\]: True\r\n\r\nIn \[5\]: " {}
}

send "import numpy; isinstance(dev.read_attribute('short_spectrum').value, numpy.ndarray)\r"
expect {
    timeout { send_user "\nFailure executing command\n"; exit 1 }
    -ex "import numpy; isinstance(dev.read_attribute('short_spectrum').value, numpy.ndarray)\r\nOut\[5\]: True\r\n\r\nIn \[6\]: " {}
}

send "exit\r"
expect eof
